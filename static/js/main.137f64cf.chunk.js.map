{"version":3,"sources":["components/Context.js","components/FormCity.js","components/Home.js","components/Weather.js","components/Hotel.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Context","createContext","city","updateCity","startDate","Date","endDate","updateCoord","UserProvider","newCity","setState","handleChangeStart","date","handleChangeEnd","state","Provider","value","this","props","children","React","Component","UserConsumer","Consumer","FormCity","handleSubmit","event","console","log","preventDefault","className","onSubmit","type","placeholder","onChange","target","selected","dateFormat","to","Home","style","textAlign","Weather","componentDidMount","fetch","town","then","res","json","data","dailyData","list","filter","reading","dt_txt","includes","days","totalTemp","map","day","main","temp","reduce","a","b","averageTemp","Math","ceil","catch","error","Hotel","hotels","results","hotel","marginTop","key","id","marginLeft","label","src","alt","margin","Form","Header","listStyleType","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.137f64cf.chunk.js","sourcesContent":["import React, { createContext } from 'react';\r\n\r\nconst Context = createContext({\r\n  city: '',\r\n  updateCity: () => {},\r\n  startDate: new Date(),\r\n  endDate: new Date(),\r\n  updateCoord: () => {},\r\n});\r\n\r\nexport class UserProvider extends React.Component {\r\n  updateCity = newCity => {\r\n    this.setState({ city: newCity });\r\n  };\r\n  \r\n  handleChangeStart = (date) => {\r\n      this.setState ({startDate: date});\r\n  }\r\n\r\n  handleChangeEnd = (date) => {\r\n      this.setState ({endDate: date});\r\n  }\r\n  \r\n  state = {\r\n    city: '',\r\n    updateCity: this.updateCity,\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n    handleChangeStart: this.handleChangeStart,\r\n    handleChangeEnd: this.handleChangeEnd\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const UserConsumer = Context.Consumer;","import React from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {\r\n    Link\r\n  } from 'react-router-dom'\r\nimport { UserConsumer } from '../components/Context';\r\n\r\nclass FormCity extends React.Component {\r\n\r\n    handleSubmit = (event) => {\r\n        console.log('Success');\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <UserConsumer>\r\n                    {({ updateCity, city, startDate, endDate, handleChangeEnd, handleChangeStart}) => {\r\n                        return (\r\n                        <div className=\"row justify-content-center\">\r\n                        <div className=\"form-group\">\r\n                            <form onSubmit={this.handleSubmit} className=\"column \">\r\n                                    <div className=\"d-flex  justify-content-center flex-wrap\">\r\n                                        <label>\r\n                                            <input className=\"form-control-sm\" type=\"text\" placeholder={'Search City'}\r\n                                            value={city || ''}  onChange={event => {\r\n                                                updateCity(event.target.value)\r\n                                            }} />\r\n                                        </label>\r\n                                    </div>\r\n                                    <div className=\"d-flex flex-row justify-content-center flex-wrap\" >\r\n                                        <label>\r\n                                            <DatePicker\r\n                                            selected={startDate}\r\n                                            onChange={date => handleChangeStart(date)}\r\n                                            dateFormat=\"d.M.yyyy\"\r\n                                            className=\"form-control-sm\"\r\n                                            />\r\n                                        </label>\r\n                                        <label>\r\n                                            <DatePicker\r\n                                            selected={endDate}\r\n                                            onChange={date => handleChangeEnd(date)}\r\n                                            dateFormat=\"d.M.yyyy\"\r\n                                            className=\"form-control-sm\"\r\n                                            />\r\n                                        </label>\r\n                                    </div>\r\n                                    <div className=\"d-flex flex-row justify-content-between\">\r\n                                        <input type=\"submit\" value=\"Submit\" className=\" btn btn-primary btn-sm\"/>\r\n                                        <Link to='/form'><button className=\"btn btn-primary active btn-sm\">Go ahead...</button></Link>\r\n                                    </div>\r\n                            </form>   \r\n                        </div>     \r\n                    </div>\r\n                    )}}\r\n                </UserConsumer>\r\n            </div>\r\n            )}\r\n}\r\n\r\nexport default FormCity","import React from 'react';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport FormCity from './FormCity';\r\n\r\nclass Home extends React.Component {\r\n   \r\n    render() { \r\n      return (\r\n        <div className=\"jumbotron \">     \r\n          <h3 className=\"display-9\" style={{textAlign: 'center'}}>Only the best hotel for you!</h3>\r\n          <p style={{textAlign: 'center'}}>You need to type city name for searching top of the best hotels. <br /> \r\n          Enjoy...</p>\r\n          <FormCity />\r\n        </div>  \r\n      );\r\n    }\r\n  } \r\n\r\nexport default Home;","import React from 'react';\r\n\r\nclass Weather extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      days: [],\r\n      town: this.props.city,\r\n      temp: ''\r\n    }\r\n  }\r\n  \r\n  componentDidMount = () => {\r\n          fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${this.state.town}&lang=en&units=metric&APPID=652891bdee8d99f67f715fab1624d14e`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n              const dailyData = data.list.filter(reading => reading.dt_txt.includes(\"12:00:00\"))\r\n              this.setState({days: dailyData})\r\n              const temp = dailyData.map((day) => day.main.temp);\r\n              const totalTemp = temp.reduce((a,b) => a+b);\r\n              const averageTemp = Math.ceil(totalTemp/5);\r\n              this.setState({temp: averageTemp});\r\n            })\r\n            .catch(error => console.log('error', error));\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n          <p>{this.state.temp} °C</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Weather","import React from 'react';\r\nimport Weather from './Weather';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { UserConsumer } from '../components/Context';\r\n\r\nclass Hotel extends React.Component {\r\n   constructor(props){\r\n       super(props);\r\n       this.state = {\r\n        town: this.props.city,\r\n        hotel: []\r\n      }\r\n   }\r\n  \r\n   componentDidMount = () => {\r\n            fetch(`https://engine.hotellook.com/api/v2/lookup.json?query=${this.state.town}&lang=en&lookFor=hotel&limit=10`)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    const hotels = data.results.hotels;\r\n                    this.setState({hotel: hotels});\r\n                })\r\n                .catch(error => console.log('error', error));\r\n    }\r\n\r\n   handleSubmit = (event) => {\r\n        console.log('success')\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <UserConsumer>\r\n                 {({city, updateCity, startDate, endDate, handleChangeEnd, handleChangeStart}) => {\r\n                     return (\r\n                        <div>\r\n                            <div className=\"card bg-secondary mb-3\">\r\n                            <form onSubmit={this.handleSubmit} \r\n                                className=\"column \">\r\n                                <div className=\"d-flex flex-row justify-content-around flex-wrap \" \r\n                                style={{marginTop: '0.6em'}}>\r\n                                    <label>\r\n                                        <input className=\"form-control-sm\" \r\n                                        type=\"text\" placeholder={'Search City'}\r\n                                        value={city} onChange={event => {\r\n                                            updateCity(event.target.value)\r\n                                        }} \r\n                                    />\r\n                                    </label>\r\n                                    \r\n                                    <label>\r\n                                        <DatePicker\r\n                                        selected={startDate}\r\n                                        onChange={date => handleChangeStart(date)}\r\n                                        dateFormat=\"d.M.yyyy\"\r\n                                        className=\"form-control-sm\"\r\n                                        />\r\n                                    </label>\r\n                                    <label>\r\n                                        <DatePicker\r\n                                        selected={endDate}\r\n                                        onChange={date => handleChangeEnd(date)}\r\n                                        dateFormat=\"d.M.yyyy\"\r\n                                        className=\"form-control-sm\"\r\n                                        />\r\n                                    </label>\r\n                                </div>\r\n                            </form>\r\n                            </div>\r\n                            <div>\r\n                                <div className=\"\">\r\n                                {this.state.hotel.map(hotels => {\r\n                                    return <div className=\"flex-wrap card bg-secondary mb-3 align-items-lg-center d-flex flex-row justify-content-between\" \r\n                                            key={hotels.id}>\r\n                                    <div className=\"d-flex flex-column \" style={{marginLeft: '2em'}}>\r\n                                        <h4>{hotels.label}</h4>\r\n                                        <Weather city={city}/>\r\n                                    </div>\r\n                                    <img className=\"col-12 col-md-8 col-sm-12 col-lg-4 mb-9 card-img-top\" \r\n                                        src={`https://photo.hotellook.com/image_v2/crop/h${hotels.id}_1/800/520.auto`}\r\n                                        alt=\"hotel poster\"\r\n                                        style={{margin: '0.5em'}}/>\r\n                                    </div>\r\n                                })} \r\n                                </div> \r\n                            </div>\r\n                        </div>\r\n                    )}}\r\n                 </UserConsumer>\r\n            </div>\r\n        )}\r\n\r\n}\r\n\r\nexport default Hotel","import React from 'react';\r\nimport Hotel from './Hotel';\r\nimport { UserConsumer } from '../components/Context';\r\n \r\nclass Form extends React.Component{\r\n  render() {\r\n     return (\r\n        <div>\r\n            <UserConsumer>\r\n               {({city}) => {\r\n                  return (\r\n                  <div className=\"jumbotron\"> \r\n                     <Hotel city={city}/>\r\n                  </div>\r\n                  )\r\n               }}\r\n            </UserConsumer>  \r\n        </div>\r\n     )}\r\n}  \r\n\r\nexport default Form","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n} from 'react-router-dom'\nimport \"bootswatch/dist/lux/bootstrap.min.css\";\nimport './App.css';\nimport Home from '../src/components/Home'\nimport Form from '../src/components/Form'\nimport { UserProvider } from '../src/components/Context';\n\nconst Header = () => {\n  return (\n    <div  className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <div>\n        <ul style={{listStyleType: 'none'}} >\n          <li><Link to='/'>Home</Link></li>\n          <li><Link to='/form'>Form</Link></li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n      <UserProvider>\n     <Router>\n       <div>\n         <Header /> \n         <Route exact path='/' component={Home} />\n         <Route path='/form' component={Form} />\n       </div>\n     </Router>\n     </UserProvider>\n  );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}